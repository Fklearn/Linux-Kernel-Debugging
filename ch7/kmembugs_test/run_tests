#!/bin/bash
# run_tests
#***************************************************************
# This program is part of the source code released for the book
#  "Linux Kernel Debugging"
# (c) Author: Kaiwan N Billimoria
# Publisher:  Packt
# GitHub repository:
# https://github.com/PacktPublishing/Linux-Kernel-Debugging
#
# From: Ch 7: Debugging kernel memory issues
#***************************************************************
# Simple bash wrapper to run our custom testcases for KASAN & UBSAN.
name=$(basename $0)
KMOD=test_kmembugs
DBGFS_MNT=/sys/kernel/debug

# TODO
# locate_kernel_config()
KCONF=/boot/config-$(uname -r)

show_curr_config()
{
echo -n "Generic KASAN: "
grep -q "CONFIG_KASAN_GENERIC=y" ${KCONF} && echo "enabled" || echo "disabled"
echo -n "        UBSAN: "
grep -q "CONFIG_UBSAN=y" ${KCONF} && echo "enabled" || echo "disabled"
echo
}

usage()
{
 echo "Usage: ${name} [--no-clear]
 --no-clear: do NOT clear the kernel ring buffer before & after running the testcase
 optional, off by default"
}


#--- 'main'
if [[ $# -ge 1 ]] && [[ $1 = "-h" ]]; then
  usage
  exit 0
fi
no_clear=0
[[ $1 = "--no-clear" ]] && no_clear=1
echo "no_clear=${no_clear}"
if ! lsmod | grep -q ${KMOD} ; then
   echo "${name}: load the test module first by running the load_testmod script"
   exit 1
fi

[ $(id -u) -ne 0 ] && {
	echo "${name}: needs root."
	exit 1
}

#--- verify debugfs pseudo-file is present
if grep -q "CONFIG_DEBUG_FS_DISALLOW_MOUNT=y" ${KCONF} ; then
    echo "${name}: debugfs mount invisible (CONFIG_DEBUG_FS_DISALLOW_MOUNT=y), can't proceed."
	exit 1 
fi
[ ! -d ${DBGFS_MNT} ] && {
	echo "${name}: debugfs mount point \"${DBGFS_MNT}\" not present?
If this is expected, pl fix this script to point to the correct debugfs mount location and retry"
	exit 1
}
KMOD_DBGFS_FILE=${DBGFS_MNT}/${KMOD}/lkd_dbgfs_run_testcase
[ ! -f ${KMOD_DBGFS_FILE} ] && {
	echo "${name}: debugfs file \"${KMOD_DBGFS_FILE}\" not present? Aborting..."
	exit 1
}
echo "Debugfs file: ${KMOD_DBGFS_FILE}
"
show_curr_config

#--- all ok, let's go; display the menu, accept the testcase #
echo "Select testcase to run:
1  Uninitialized Memory Read - UMR
2  Use After Return - UAR

Memory leakage
3.1  simple memory leakage testcase1
3.2  simple memory leakage testcase2 - caller to free memory

OOB accesses on static (compile-time) global memory + on stack local memory
4.1  Read  (right) overflow
4.2  Write (right) overflow
4.3  Read  (left) underflow
4.4  Write (left) underflow

OOB accesses on dynamic (kmalloc-ed) memory
5.1  Read  (right) overflow
5.2  Write (right) overflow
5.3  Read  (left) underflow
5.4  Write (left) underflow

6  Use After Free - UAF
7  Double-free

UBSAN arithmetic UB testcases
8.1  add overflow
8.2  sub overflow
8.3  mul overflow
8.4  negate overflow
8.5  shift OOB
8.6  OOB
8.7  load invalid value
8.8  misaligned access
8.9  object size mismatch

9  copy_[to|from]_user*() tests
10 UMR on slab (SLUB) memory

(Type in the testcase number to run): "
read testcase

#SLUB debug tests: OOB accesses on dynamic (kmalloc-ed) memory
#11.1 Read  (right) overflow
#11.2 Write (right) overflow

MAX_TESTNUM=10
pretend_int_tc=${testcase}  # just to validate
if [ ${#testcase} -eq 3 ]; then
   pretend_int_tc=${testcase::-2}
elif [ ${#testcase} -eq 4 ]; then
   pretend_int_tc=${testcase::-3}
fi
if [ ${pretend_int_tc} -le 0 -o ${pretend_int_tc} -gt ${MAX_TESTNUM} ]; then
   echo "${name}: invalid testcase # (${testcase})"
   exit 1
fi

echo "Running testcase \"${testcase}\" via test module now..."
[ ${no_clear} -eq 0 ] && dmesg -C
echo "${testcase}" > ${KMOD_DBGFS_FILE}  # the real work!
dmesg

exit 0
