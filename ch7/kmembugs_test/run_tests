#!/bin/bash
# run_tests
# Simple bash wrapper to run our custom testcases for KASAN & UBSAN

name=$(basename $0)
KMOD=test_kmembugs
DBGFS_MNT=/sys/kernel/debug

INTERACTIVE=1

# TODO
# locate_kernel_config()
KCONF=/boot/config-$(uname -r)

show_curr_config()
{
echo -n "Generic KASAN: "
grep -q "CONFIG_KASAN_GENERIC=y" ${KCONF} && echo "enabled" || echo "disabled"
echo -n "        UBSAN: "
grep -q "CONFIG_UBSAN=y" ${KCONF} && echo "enabled" || echo "disabled"
echo
}

# Parameter is the testcase # to run
run_testcase()
{
# echo "num=$# params=$@"
  [ $# -ne 1 ] && {
    echo "run_testcase(): pass the testcase # as the parameter"
	return
  }
  local testcase=$1
  echo "-------- Running testcase \"${testcase}\" via test module now..."
  dmesg -C
  echo "${testcase}" > ${KMOD_DBGFS_FILE}
  dmesg
}


#--- 'main'
if ! lsmod | grep -q ${KMOD} ; then
   echo "${name}: load the test module first by running the load_testmod script"
   exit 1
fi

[ $(id -u) -ne 0 ] && {
	echo "${name}: needs root."
	exit 1
}

#--- verify debugfs pseudo-file is present
if grep -q "CONFIG_DEBUG_FS_DISALLOW_MOUNT=y" ${KCONF} ; then
    echo "${name}: debugfs mount invisible (CONFIG_DEBUG_FS_DISALLOW_MOUNT=y), can't proceed."
	exit 1 
fi
[ ! -d ${DBGFS_MNT} ] && {
	echo "${name}: debugfs mount point \"${DBGFS_MNT}\" not present?
If this is expected, pl fix this script to point to the correct location and retry"
	exit 1
}
KMOD_DBGFS_FILE=${DBGFS_MNT}/${KMOD}/lkd_dbgfs_run_testcase
[ ! -f ${KMOD_DBGFS_FILE} ] && {
	echo "${name}: debugfs file \"${KMOD_DBGFS_FILE}\" not present? Aborting..."
	exit 1
}
echo "Debugfs file: ${KMOD_DBGFS_FILE}
"

show_curr_config

MAX_TESTNUM=9

if [ ${INTERACTIVE} -eq 1 ] ; then

#--- all ok, let's go
echo "Select testcase to run:
1  Uninitialized Memory Read - UMR
2  Use After Return - UAR

Memory leakage
3.1  simple memory leakage testcase1
3.2  simple memory leakage testcase2 - caller to free memory

OOB accesses on static (compile-time) global memory + on stack local memory
4.1  Read  (right) overflow
4.2  Write (right) overflow
4.3  Read  (left) underflow
4.4  Write (left) underflow

OOB accesses on dynamic (kmalloc-ed) memory
5.1  Read  (right) overflow
5.2  Write (right) overflow
5.3  Read  (left) underflow
5.4  Write (left) underflow

6  Use After Free - UAF
7  Double-free

UBSAN arithmetic UB testcases
8.1  add overflow
8.2  sub overflow
8.3  mul overflow
8.4  negate overflow
8.5  shift OOB
8.6  OOB
8.7  load invalid value
8.8  misaligned access
8.9  object size mismatch

9  copy_[to|from]_user*() tests

(Type in the testcase number to run): "
read testcase
pretend_int_tc=${testcase}  # just to validate
[ ${#testcase} -eq 3 ] && pretend_int_tc=${testcase::-2}
#echo "pretend_int_tc=${pretend_int_tc}"
if [ ${pretend_int_tc} -le 0 -o ${pretend_int_tc} -gt ${MAX_TESTNUM} ]; then
   echo "${name}: invalid testcase # (${testcase})"
   exit 1
fi
run_testcase ${testcase}

else   # non-interactive, run all !

  for testcase in 1 2 3.1 3.2 4.1 4.2 4.3 4.4 5.1 5.2 5.3 5.4 6 7 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 9
  do
    run_testcase ${testcase}
  done

fi

exit 0
